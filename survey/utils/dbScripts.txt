Create Or Replace view VW_ALL_POSTS As
Select r.ID, p.ID as PostID, UserName, FirstName, LastName, Gender, State, BirthYear, Category, Title, Description, PostDate, ExpireAfter
From REGISTRATION as r, POST as p
Where r.ID = p.UserID;

Drop procedure if exists K12_CLASS_CREATENEWCLASS;
Create procedure K12_CLASS_CREATENEWCLASS(IN className VARCHAR(50), IN classDescription TEXT)
INSERT INTO  `nelson8_db`.`K12_CLASS` (`ID` ,`Name` ,`Description`) VALUES (NULL ,  className, classDescription);


Drop procedure if exists K12_SURVEY_INSERTNEWSURVEY;
Create Procedure K12_SURVEY_INSERTNEWSURVEY(IN teacherID INT(15), IN classID INT(15), IN completed VARCHAR(3),  IN surveyTypeID INT(1))
INSERT INTO `nelson8_db`.`K12_SURVEY` (`ID`, `TeacherID`, `ClassID`, `StartTime`, `EndTime`, `LastQuestionAnswered`, `Completed`, `SurveyTypeID`) VALUES (NULL, teacherID, classID, 'CURRENT_TIMESTAMP', NULL, '1', completed, surveyTypeID);

Drop procedure if exists K12_SURVEY_TEACHER_INCOMPLETESURVEY;
Create Procedure K12_SURVEY_TEACHER_INCOMPLETESURVEY(IN email VARCHAR(50))
Select s.ClassID
From K12_SURVEY as s, K12_TEACHER as t
Where s.ID = t.ID AND s.Completed ="no" AND t.Email = email;

Drop procedure if exists K12_SURVEY_ANSWERS_INSERT_SURVEY;
Create Procedure K12_SURVEY_ANSWERS_INSERT_SURVEY(IN surveyID INT(15), IN questionID INT(15), IN answerID INT(15))
insert into K12_SURVEY_ANSWERS values (surveyID, questionID, answerID);

Drop procedure if exists K12_TEACHER_AUTHENTICATED;
Create Procedure K12_TEACHER_AUTHENTICATED(IN userName VARCHAR(50))
select Authenticated From K12_TEACHER WHERE Email = userName;

Drop procedure if exists K12_TEACHER_GETFULLNAME;
Create Procedure K12_TEACHER_GETFULLNAME(IN userName VARCHAR(50))
select FirstName, LastName from K12_TEACHER where Email = userName;

Drop procedure if exists K12_TEACHER_UPDATEFULLNAME;
Create Procedure K12_TEACHER_UPDATEFULLNAME(IN userName VARCHAR(50), IN newFirstName VARCHAR(30), IN newLastName VARCHAR(30))
UPDATE K12_TEACHER SET FirstName = newFirstName, LastName = newLastName WHERE Email = userName;

Drop procedure if exists K12_TEACHER_VERIFYREGISTRATIONCODE;
Create Procedure K12_TEACHER_VERIFYREGISTRATIONCODE(IN userName VARCHAR(50), IN regCode VARCHAR(50))
select count(*) as c from K12_TEACHER where Email = userName and RegistrationCode = regCode;

Drop procedure if exists K12_TEACHER_AUTHENTICATE;
Create Procedure K12_TEACHER_AUTHENTICATE(IN userName VARCHAR(50), IN regCode VARCHAR(50))
UPDATE K12_TEACHER SET Authenticated = 'yes' WHERE Email = userName and RegistrationCode = regCode;

Drop procedure if exists K12_EVENTS_INSERTEVENT;
Create Procedure K12_EVENTS_INSERTEVENT(IN title VARCHAR(50), IN startDate VARCHAR(19), IN endDate VARCHAR(19), IN teacherID INT(15), IN eventID VARCHAR(25), IN description TEXT)
insert into K12_EVENTS values(title, startDate, endDate, teacherID, eventID, description);

Drop procedure if exists K12_EVENTS_GETEVENTS;
Create Procedure K12_EVENTS_GETEVENTS()
select * From K12_EVENTS;

Drop procedure if exists K12_TEACHER_GETPASSWORD;
Create Procedure K12_TEACHER_GETPASSWORD(IN userName VARCHAR(50), IN pwd VARCHAR(30))
select Password from K12_TEACHER where Email = userName and Password = pwd;

Drop procedure if exists K12_TEACHER_GETCOUNTAUTHENTICATED;
Create Procedure K12_TEACHER_GETCOUNTAUTHENTICATED(IN userName VARCHAR(50), IN pwd VARCHAR(30))
select count(*) as c from K12_TEACHER where Email = userName and Password = pwd;

Drop procedure if exists K12_TEACHER_GETAUTHENTICATED_USERNAME_PASSWORD;
Create Procedure K12_TEACHER_GETAUTHENTICATED_USERNAME_PASSWORD(IN userName VARCHAR(50), IN pwd VARCHAR(30))
select Authenticated From K12_TEACHER WHERE Email = userName and Password = pwd;

Drop procedure if exists K12_TEACHER_COUNTFORREGISTRATION;
Create Procedure K12_TEACHER_COUNTFORREGISTRATION(IN userName VARCHAR(50))
select count(*) as c from K12_TEACHER where Email = userName;

Drop procedure if exists K12_POSTSURVEY_QUESTIONS_GETQUESTIONS;
Create Procedure K12_POSTSURVEY_QUESTIONS_GETQUESTIONS()
SELECT Question FROM K12_POSTSURVEY_QUESTIONS;

Drop procedure if exists K12_LICHERT_ANSWERS_GETANSWERS;
Create Procedure K12_LICHERT_ANSWERS_GETANSWERS()
SELECT Description FROM K12_LICHERT_ANSWERS ORDER BY K12_LICHERT_ANSWERS.ID ASC;

Drop procedure if exists K12_TEACHER_INSERTNEWTEACHER;
Create Procedure K12_TEACHER_INSERTNEWTEACHER(IN email VARCHAR(50), IN firstName VARCHAR(30), IN lastName VARCHAR(30), IN school VARCHAR(40), IN education TEXT, IN csBackground TEXT, IN pwd VARCHAR(30), IN authenticated VARCHAR(30), IN regCode VARCHAR(50))
insert into K12_TEACHER values(null, email, firstName, lastName, school, education, csBackground, pwd, authenticated, regCode, 3);

Drop procedure if exists K12_TEACHER_PROMOTETEACHERACCESS;
Create Procedure K12_TEACHER_PROMOTETEACHERACCESS(IN email VARCHAR(50))
UPDATE K12_TEACHER SET AccessLevel = 2 WHERE Email = email;

Drop procedure if exists K12_TEACHER_DEMOTETEACHERACCESS;
Create Procedure K12_TEACHER_DEMOTETEACHERACCESS(IN email VARCHAR(50))
UPDATE K12_TEACHER SET AccessLevel = 3 WHERE Email = email;

Drop procedure if exists K12_TEACHER_GETALLTEACHERS;
Create Procedure K12_TEACHER_GETALLTEACHERS()
SELECT `ID`, `Email`, `FirstName`, `LastName`, `School`, `Education`, `CSBackground`, `Authenticated`,`RegistrationCode`, `AccessLevel` FROM `K12_TEACHER`;

Drop procedure if exists K12_CLASS_GETALL;
Create Procedure K12_CLASS_GETALL()
SELECT * FROM `K12_CLASS`;

Drop procedure if exists K12_CLASS_GETCLASSES

Drop procedure if exists K12_PRESURVEY_QUESTIONS_GETQUESTIONAT;
Create Procedure K12_PRESURVEY_QUESTIONS_GETQUESTIONAT(IN qIndex INT(5))
SELECT Question FROM K12_PRESURVEY_QUESTIONS WHERE ID = qIndex;

Drop procedure if exists K12_POSTSURVEY_QUESTIONS_GETQUESTIONAT;
Create Procedure K12_POSTSURVEY_QUESTIONS_GETQUESTIONAT(IN qIndex INT(5))
SELECT Question FROM K12_POSTSURVEY_QUESTIONS WHERE ID = qIndex;

Drop procedure if exists K12_PRESURVEY_QUESTIONS_GETQUESTIONCOUNT;
Create procedure K12_PRESURVEY_QUESTIONS_GETQUESTIONCOUNT()
SELECT count(*) as c FROM K12_PRESURVEY_QUESTIONS;

Drop procedure if exists K12_POSTSURVEY_QUESTIONS_GETQUESTIONCOUNT;
Create procedure K12_POSTSURVEY_QUESTIONS_GETQUESTIONCOUNT()
SELECT count(*) as c FROM K12_POSTSURVEY_QUESTIONS;

Drop procedure if exists K12_SURVEY_GETSURVEYTYPE;
Create procedure K12_SURVEY_GETSURVEYTYPE(IN surveyID INT(15))
SELECT t.Description
FROM K12_SURVEY as s, K12_SURVEYTYPE as t
WHERE s.ID = surveyID AND s.SurveyTypeID = t.ID;

Drop procedure if exists K12_LICHERT_ANSWERS_GETANSWERS;
Create Procedure K12_LICHERT_ANSWERS_GETANSWERS()
SELECT Description FROM K12_LICHERT_ANSWERS ORDER BY K12_LICHERT_ANSWERS.ID ASC;


Drop procedure if exists SP_COUNT_USER;
Create Procedure SP_COUNT_USER(IN uname VARCHAR(50), IN pwd VARCHAR(60), OUT count INT)
Select count(*) into count from REGISTRATION where username = uname and password = pwd;


Drop procedure if exists SP_FIND_USER_ID;
Create Procedure SP_FIND_USER_ID(IN uname VARCHAR(50), IN pwd VARCHAR(60), OUT UID INT)
Select ID into UID from REGISTRATION where username = uname and password = pwd;

Create Or Replace view VW_ALL_POSTS_WITH_PIC As
Select r.ID as UserID, UserName, FirstName, LastName, Gender, State, BirthYear, PostID, Category, Title, Description, PostDate, ExpireAfter, l.ID as PicID, PicLink
From REGISTRATION as r, POST as p, POST_PIC as l
Where r.ID = p.UserID and p.ID = l.PostID


Drop procedure if exists SP_GET_POSTS_BY_EMAIL;
Create Procedure SP_GET_POSTS_BY_EMAIL (IN uname VARCHAR(50)) 
select Category, Title, Description, PostDate, PostID  from VW_ALL_POSTS where UserName = uname;


-- The following demonstrates using sp to create large amount of sample data
DELIMITER //

Drop  procedure if exists SP_CREATE_SAMPLE_DATA;//
CREATE PROCEDURE SP_CREATE_SAMPLE_DATA ()
BEGIN
 DECLARE v INT;
 SET v = 0;
 WHILE v < 40 DO
 INSERT INTO REGISTRATION VALUES (null, concat('test', v, '@test.com'), '12345abcde', '', concat('Test First ', v), concat('Test Last ', v),  'Male', 'IN', 2015);
 SET v = v + 1;
 END WHILE;
END; //

call SP_CREATE_SAMPLE_DATA ()








<script type="text/javascript">
    $(document).ready(function(){
        $("#submit").click(submitSurvey);
    });

    function submitSurvey()
    {
        var quesCount = <?php print $questionCount ?>;

        var i = 0;
        for(i=0; i < quesCount; i++)
        {
            var answerVal = 0;
            var question = "question" + i;
            var answerSelected = $(question + " input[type='radio']:checked");
            <?php print "phpQuestionID " ?> = i;
            if (answerSelected.length > 0)
            {
                answerVal = answerSelected.val();
                <?php print(
                        $sqlInsert = "INSERT INTO `nelson8_db`.`K12_SURVEY_ANSWERS` (`ID`, `SurveyTypeID`, `SurveyID`, `QuestionID`, `AnswerID`) 
                        VALUES (NULL, '1', '1', '".i."', '".."');"
                    )?>
            }

        }
    }

</script>